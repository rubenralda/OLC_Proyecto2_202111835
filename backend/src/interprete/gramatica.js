/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,6],$V2=[1,12],$V3=[1,10],$V4=[1,11],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[1,17],$Va=[2,5,9,14,21,30,40,41,42,43,44],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,27],$Vf=[1,30],$Vg=[1,31],$Vh=[1,32],$Vi=[14,17,26,32],$Vj=[1,34],$Vk=[1,39],$Vl=[1,40],$Vm=[1,48],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,46],$Vu=[1,50],$Vv=[1,59],$Vw=[2,5,9,14,15,20,21,30,34,35,36,40,41,42,43,44,46,47,48,49,50,51,58,59,60,61,65,76,77,79,83,84,85,86,87],$Vx=[1,85],$Vy=[1,84],$Vz=[1,92],$VA=[1,93],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[1,81],$VF=[1,82],$VG=[1,83],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[11,17,20,24,25,27,31,32,39,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VO=[17,39],$VP=[1,108],$VQ=[11,17,20,24,25,27,39,74,75],$VR=[1,157],$VS=[1,153],$VT=[1,154],$VU=[1,155],$VV=[1,156],$VW=[1,159],$VX=[1,160],$VY=[1,161],$VZ=[1,163],$V_=[1,162],$V$=[11,17,20,24,25,27,31,32,39,64,65,70,71,72,73,74,75],$V01=[11,17,20,24,25,27,31,32,39,64,65,66,67,69,70,71,72,73,74,75],$V11=[11,17,20,24,25,27,31,32,39,70,71,72,73,74,75],$V21=[14,20,30,34,35,36,40,41,42,43,44,58,59,60,61,77,79,83,84,85,86,87],$V31=[20,39],$V41=[14,15,34,35,36,46,47,48,49,50,51,65,76],$V51=[1,257],$V61=[1,256],$V71=[20,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion_funcion":7,"declaracion_variable":8,"MAIN":9,"llamada_funcion":10,"PUNTO_COMA":11,"asignacion":12,"tipo":13,"ID":14,"PAR_ABRE":15,"parametros":16,"PAR_CIERRA":17,"LLAVE_ABRE":18,"declaraciones_locales":19,"LLAVE_CIERRA":20,"VOID":21,"IGUAL":22,"expresion":23,"TERNARIO":24,"DOS_PUNTOS":25,"COR_ABRE":26,"COR_CIERRE":27,"NUEVO":28,"lista_valores":29,"LISTA":30,"MENOR":31,"MAYOR":32,"argumentos":33,"LENGTH":34,"TO_LOWER":35,"TO_UPPER":36,"PUNTO":37,"ADD":38,"COMA":39,"INT":40,"DOUBLE":41,"BOOL":42,"CHAR":43,"STRING":44,"valor":45,"DECIMAL":46,"ENTERO":47,"CARACTER":48,"CADENA":49,"TRUE":50,"FALSE":51,"sentencias":52,"sentencia_condicional_if":53,"sentencia_condicional_switch":54,"sentencia_bucle_while":55,"sentencia_bucle_for":56,"sentencia_bucle_do_while":57,"IMPRIMIR":58,"BREAK":59,"CONTINUE":60,"RETURN":61,"INCREMENTO":62,"DECREMENTO":63,"SUMA":64,"RESTA":65,"MULTIPLICACION":66,"DIVISION":67,"POTENCIA":68,"MODULO":69,"MAYOR_IGUAL":70,"MENOR_IGUAL":71,"DOBLE_IGUAL":72,"NEGACION_IGUAL":73,"AND":74,"OR":75,"NEGACION":76,"IF":77,"ELSE":78,"SWITCH":79,"case_list":80,"default_case":81,"case":82,"CASE":83,"DEFAULT":84,"WHILE":85,"DO":86,"FOR":87,"declaracion_variable_for":88,"actualizacion":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"MAIN",11:"PUNTO_COMA",14:"ID",15:"PAR_ABRE",17:"PAR_CIERRA",18:"LLAVE_ABRE",20:"LLAVE_CIERRA",21:"VOID",22:"IGUAL",24:"TERNARIO",25:"DOS_PUNTOS",26:"COR_ABRE",27:"COR_CIERRE",28:"NUEVO",30:"LISTA",31:"MENOR",32:"MAYOR",34:"LENGTH",35:"TO_LOWER",36:"TO_UPPER",37:"PUNTO",38:"ADD",39:"COMA",40:"INT",41:"DOUBLE",42:"BOOL",43:"CHAR",44:"STRING",46:"DECIMAL",47:"ENTERO",48:"CARACTER",49:"CADENA",50:"TRUE",51:"FALSE",58:"IMPRIMIR",59:"BREAK",60:"CONTINUE",61:"RETURN",62:"INCREMENTO",63:"DECREMENTO",64:"SUMA",65:"RESTA",66:"MULTIPLICACION",67:"DIVISION",68:"POTENCIA",69:"MODULO",70:"MAYOR_IGUAL",71:"MENOR_IGUAL",72:"DOBLE_IGUAL",73:"NEGACION_IGUAL",74:"AND",75:"OR",76:"NEGACION",77:"IF",78:"ELSE",79:"SWITCH",83:"CASE",84:"DEFAULT",85:"WHILE",86:"DO",87:"FOR"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,3],[6,1],[6,2],[7,8],[7,7],[7,8],[7,7],[8,3],[8,5],[8,8],[8,9],[8,11],[8,9],[8,12],[10,4],[10,3],[10,4],[10,4],[10,4],[12,4],[12,7],[12,8],[12,7],[12,7],[12,9],[16,4],[16,2],[13,1],[13,1],[13,1],[13,1],[13,1],[33,3],[33,1],[29,3],[29,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[19,2],[19,1],[52,1],[52,1],[52,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,5],[52,2],[52,2],[52,3],[52,2],[52,3],[52,3],[23,3],[23,3],[23,2],[23,3],[23,3],[23,3],[23,1],[23,1],[23,1],[23,3],[23,3],[23,4],[23,6],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,2],[53,7],[53,11],[53,9],[54,8],[54,7],[54,7],[80,2],[80,1],[82,4],[81,3],[55,7],[57,9],[56,10],[88,1],[88,1],[89,3],[89,6],[89,7],[89,6],[89,6],[89,8],[89,2],[89,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 39: case 41: case 49: case 96:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 7: case 44: case 45: case 50: case 51: case 53: case 54: case 55: case 56: case 57: case 98: case 102: case 103:
 this.$ = $$[$0]; 
break;
case 6:
 this.$ = $$[$0-1]; $$[$0-1].main = true; 
break;
case 8:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
break;
case 9:
 this.$ = new Funcion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 10:
 this.$ = new Funcion($$[$0-6], $$[$0-5], [], $$[$0-1]); 
break;
case 11:
 this.$ = new Funcion("VOID", $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 12:
 this.$ = new Funcion("VOID", $$[$0-5], [], $$[$0-1]); 
break;
case 13:
 this.$ = new DeclaracionVariables($$[$0-2], $$[$0-1]); 
break;
case 14:
 this.$ = new DeclaracionVariables($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 15:
 this.$ = new DeclaracionVariables($$[$0-7], $$[$0-6], $$[$0-1], $$[$0-3]); 
break;
case 16:
 this.$ = new DeclaracionVariables($$[$0-8], $$[$0-7]); this.$.guardarTernario($$[$0-5], $$[$0-3], $$[$0-1]);
break;
case 17:
 this.$ = new Vector($$[$0-10], $$[$0-7], $$[$0-4], $$[$0-2]); 
break;
case 18:
 this.$ = new Vector($$[$0-8], $$[$0-5], $$[$0-8], null, $$[$0-2]); 
break;
case 19:
 this.$ = new Lista($$[$0-9], $$[$0-7], $$[$0-2]); 
break;
case 20:
 this.$ = new Llamada($$[$0-3], $$[$0-1]); 
break;
case 21:
 this.$ = new Llamada($$[$0-2]); 
break;
case 22:
 this.$ = new Largo($$[$0-1]); 
break;
case 23:
 this.$ = new Tolower($$[$0-1]); 
break;
case 24:
 this.$ = new Toupper($$[$0-1]); 
break;
case 25:
 this.$ = new Asignacion($$[$0-3], $$[$0-1]); 
break;
case 26:
 this.$ = new Asignacion($$[$0-6], $$[$0-1], $$[$0-3]); 
break;
case 27:
 this.$ = new Asignacion($$[$0-7]); this.$.guardarTernario($$[$0-5], $$[$0-3], $$[$0-1]);
break;
case 28:
 this.$ = new Asignacion($$[$0-6], $$[$0-1], null, $$[$0-4]); 
break;
case 29:
 this.$ = new ActualizarLista($$[$0-6], $$[$0-2]); 
break;
case 30:
 this.$ = new ActualizarLista($$[$0-8], $$[$0-1], $$[$0-5]); 
break;
case 31:
 $$[$0-3].push(new Parametros($$[$0-1], $$[$0])); this.$ = $$[$0-3]; 
break;
case 32:
 this.$ = [new Parametros($$[$0-1], $$[$0])]; 
break;
case 33:
 this.$ = "INT"; 
break;
case 34:
 this.$ = "DOUBLE"; 
break;
case 35:
 this.$ = "BOOL"; 
break;
case 36:
 this.$ = "CHAR"; 
break;
case 37:
 this.$ = "STRING"; 
break;
case 38: case 40:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 42:
 this.$ = parseFloat($$[$0]); 
break;
case 43:
 this.$ = parseInt($$[$0]); 
break;
case 46:
 this.$ = true; 
break;
case 47:
 this.$ = false; 
break;
case 48: case 95:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 52:
 this.$ = $$[$0-1]; 
break;
case 58:
 this.$ = new Imprimir($$[$0-2]); 
break;
case 59:
 this.$ = "BREAK"; 
break;
case 60:
 this.$ = "CONTINUE"; 
break;
case 61:
 this.$ = new Retorno($$[$0-1]); 
break;
case 62:
 this.$ = new Retorno(); 
break;
case 63:
 this.$ = new Incremento($$[$0-2]); 
break;
case 64:
 this.$ = new Decremento($$[$0-2]); 
break;
case 65:
 this.$ = new Expresion("SUMA", $$[$0-2], $$[$0]); 
break;
case 66:
 this.$ = new Expresion("RESTA", $$[$0-2], $$[$0]); 
break;
case 67:
 this.$ = new Expresion("UNARIO", $$[$0]); 
break;
case 68:
 this.$ = new Expresion("MULTIPLICACION", $$[$0-2], $$[$0]); 
break;
case 69:
 this.$ = new Expresion("DIVICION", $$[$0-2], $$[$0]); 
break;
case 70:
 this.$ = new Expresion("PAR", $$[$0-1]); 
break;
case 71:
 this.$ = new Expresion("VALOR", $$[$0]); 
break;
case 72:
 this.$ = new Expresion("ID", $$[$0]); 
break;
case 73:
 this.$ = new Expresion("LLAMADA", $$[$0]); 
break;
case 74:
 this.$ = new Expresion("POTENCIA", $$[$0-2], $$[$0]); 
break;
case 75:
 this.$ = new Expresion("MODULO", $$[$0-2], $$[$0]); 
break;
case 76:
 this.$ = new Expresion("VECTOR", $$[$0-3], $$[$0-1]); 
break;
case 77:
 this.$ = new Expresion("LISTA", $$[$0-5], $$[$0-2]); 
break;
case 78:
 this.$ = new ExpresionRelacional("MAYOR", $$[$0-2], $$[$0]); 
break;
case 79:
 this.$ = new ExpresionRelacional("MENOR", $$[$0-2], $$[$0]); 
break;
case 80:
 this.$ = new ExpresionRelacional("MAYOR_IGUAL", $$[$0-2], $$[$0]); 
break;
case 81:
 this.$ = new ExpresionRelacional("MENOR_IGUAL", $$[$0-2], $$[$0]); 
break;
case 82:
 this.$ = new ExpresionRelacional("DOBLE_IGUAL", $$[$0-2], $$[$0]); 
break;
case 83:
 this.$ = new ExpresionRelacional("NEGACION_IGUAL", $$[$0-2], $$[$0]); 
break;
case 84:
 this.$ = new ExpresionLogica("AND", $$[$0-2], $$[$0]); 
break;
case 85:
 this.$ = new ExpresionLogica("OR", $$[$0-2], $$[$0]); 
break;
case 86:
 this.$ = new ExpresionLogica("NEGACION", $$[$0]); 
break;
case 87:
 this.$ = new Expresion("INCREMENTO", $$[$0-1]); 
break;
case 88:
 this.$ = new Expresion("DECREMENTO", $$[$0-1]); 
break;
case 89:
 this.$ = new InstruccionIf($$[$0-4], $$[$0-1]); 
break;
case 90:
 this.$ = new InstruccionIf($$[$0-8], $$[$0-5], $$[$0-1]); 
break;
case 91:
 this.$ = new InstruccionIf($$[$0-6], $$[$0-3], [], $$[$0]); 
break;
case 92:
 this.$ = new IntruccionSwitch($$[$0-5], $$[$0-2], $$[$0-1]); 
break;
case 93:
 this.$ = new IntruccionSwitch($$[$0-4], $$[$0-1]); 
break;
case 94:
 this.$ = new IntruccionSwitch($$[$0-4], [], $$[$0-1]); 
break;
case 97:
 this.$ = new InstruccionCase($$[$0-2], $$[$0]); 
break;
case 99:
 this.$ = new BucleWhile($$[$0-4], $$[$0-1]); 
break;
case 100:
 this.$ = new BucleDoWhile($$[$0-2], $$[$0-6]); 
break;
case 101:
 this.$ = new BucleFor($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 104:
 this.$ = new Asignacion($$[$0-2], $$[$0]); 
break;
case 105:
 this.$ = new Asignacion($$[$0-5], $$[$0], $$[$0-2]); 
break;
case 106:
 this.$ = new Asignacion($$[$0-6]); this.$.guardarTernario($$[$0-4], $$[$0-2], $$[$0]);
break;
case 107:
 this.$ = new Asignacion($$[$0-5], $$[$0], null, $$[$0-3]); 
break;
case 108:
 this.$ = new ActualizarLista($$[$0-5], $$[$0-1]); 
break;
case 109:
 this.$ = new ActualizarLista($$[$0-7], $$[$0], $$[$0-4]); 
break;
case 110:
 this.$ = new Incremento($$[$0-1]); 
break;
case 111:
 this.$ = new Decremento($$[$0-1]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:$V1,12:7,13:9,14:$V2,21:$V3,30:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},{1:[3]},{2:$V0,5:[1,18],6:19,7:4,8:5,9:$V1,12:7,13:9,14:$V2,21:$V3,30:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),{10:20,14:[1,21],34:$Vb,35:$Vc,36:$Vd},o($Va,[2,7]),{11:[1,25]},{14:[1,26],26:$Ve},{14:[1,28]},{31:[1,29]},{22:$Vf,26:$Vg,37:$Vh},o($Vi,[2,33]),o($Vi,[2,34]),o($Vi,[2,35]),o($Vi,[2,36]),o($Vi,[2,37]),{1:[2,1]},o($Va,[2,2]),{11:[1,33]},{15:$Vj},{15:[1,35]},{15:[1,36]},{15:[1,37]},o($Va,[2,8]),{11:$Vk,15:[1,38],22:$Vl},{27:[1,41]},{15:[1,42]},{13:43,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},{10:49,14:$Vm,15:[1,45],23:44,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:57,26:[1,58],34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{38:[1,60]},o($Va,[2,6]),{10:49,14:$Vm,15:$Vv,17:[1,62],23:63,33:61,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:64,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:65,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:66,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{13:69,16:67,17:[1,68],40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},o($Vw,[2,13]),{10:49,14:$Vm,15:[1,71],23:70,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{14:[1,72]},{13:69,16:73,17:[1,74],40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},{32:[1,75]},{11:[1,76],24:[1,77],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,13:94,14:$Vm,15:$Vv,23:95,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:96,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($VN,[2,71]),o($VN,[2,72],{15:$Vj,26:[1,97]}),o($VN,[2,73]),{10:49,14:$Vm,15:$Vv,23:98,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($VN,[2,42]),o($VN,[2,43]),o($VN,[2,44]),o($VN,[2,45]),o($VN,[2,46]),o($VN,[2,47]),{27:[1,99],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,14:$Vm,15:$Vv,23:100,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:95,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{15:[1,101]},{17:[1,102],39:[1,103]},o($VN,[2,21]),o($VO,[2,39],{31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM}),{17:[1,104],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{17:[1,105],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{17:[1,106],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{17:[1,107],39:$VP},{18:[1,109]},{14:[1,110]},{11:[1,111],24:[1,112],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,13:113,14:$Vm,15:$Vv,23:95,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{22:[1,114]},{17:[1,115],39:$VP},{18:[1,116]},{14:[1,117]},o($Vw,[2,25]),{10:49,14:$Vm,15:$Vv,23:118,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:119,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:120,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:121,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:122,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:123,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:124,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:125,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:126,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:127,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:128,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:129,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:130,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:131,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:132,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($VN,[2,87]),o($VN,[2,88]),{17:[1,133]},{17:[1,134],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o([11,17,20,24,25,27,31,32,39,64,65,66,67,68,69,70,71,72,73,74,75],[2,67],{62:$Vz,63:$VA}),{10:49,14:$Vm,15:$Vv,23:135,26:[1,136],34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($VQ,[2,86],{31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK}),{22:[1,137]},{27:[1,138],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,14:$Vm,15:$Vv,23:139,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($VN,[2,20]),{10:49,14:$Vm,15:$Vv,23:140,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($VN,[2,22]),o($VN,[2,23]),o($VN,[2,24]),{18:[1,141]},{13:142,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},{8:145,10:147,12:146,13:158,14:$VR,19:143,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:144,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},o($VO,[2,32]),o($Vw,[2,14]),{10:49,14:$Vm,15:$Vv,23:164,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{17:[1,165]},{18:[1,167],28:[1,166]},{18:[1,168]},{8:145,10:147,12:146,13:158,14:$VR,19:169,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:144,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{22:[1,170]},{25:[1,171],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o($V$,[2,65],{62:$Vz,63:$VA,66:$VD,67:$VE,68:$VF,69:$VG}),o($V$,[2,66],{62:$Vz,63:$VA,66:$VD,67:$VE,68:$VF,69:$VG}),o($V01,[2,68],{62:$Vz,63:$VA,68:$VF}),o($V01,[2,69],{62:$Vz,63:$VA,68:$VF}),o($V01,[2,74],{62:$Vz,63:$VA}),o($V01,[2,75],{62:$Vz,63:$VA,68:$VF}),o($V11,[2,78],{62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG}),o($V11,[2,79],{62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG}),o($V11,[2,80],{62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG}),o($V11,[2,81],{62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG}),o($V11,[2,82],{62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG}),o($V11,[2,83],{62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG}),o($VQ,[2,84],{31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK}),o([11,17,20,24,25,27,39,75],[2,85],{31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL}),{10:49,14:$Vm,15:$Vv,23:172,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($VN,[2,70]),{27:[1,173],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,14:$Vm,15:$Vv,23:174,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:175,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{27:[1,176]},{17:[1,177],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o($VO,[2,38],{31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM}),{8:145,10:147,12:146,13:158,14:$VR,19:178,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:144,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{14:[1,179]},{8:145,10:147,12:146,13:158,14:$VR,20:[1,180],30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:181,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},o($V21,[2,49]),o($V21,[2,50]),o($V21,[2,51]),{11:[1,182]},o($V21,[2,53]),o($V21,[2,54]),o($V21,[2,55]),o($V21,[2,56]),o($V21,[2,57]),{15:[1,183]},{11:[1,184]},{11:[1,185]},{10:49,11:[1,187],14:$Vm,15:$Vv,23:186,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{15:$Vj,22:$Vf,26:$Vg,37:$Vh,62:[1,188],63:[1,189]},{14:[1,190],26:$Ve},{15:[1,191]},{15:[1,192]},{15:[1,193]},{15:[1,194]},{18:[1,195]},{25:[1,196],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,14:$Vm,15:$Vv,23:197,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{13:198,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},{10:49,14:$Vm,15:$Vv,23:200,29:199,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{8:145,10:147,12:146,13:158,14:$VR,19:201,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:144,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{8:145,10:147,12:146,13:158,14:$VR,20:[1,202],30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:181,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{28:[1,203]},{10:49,14:$Vm,15:$Vv,23:204,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{11:[1,205],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o($VN,[2,76]),{27:[1,206],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{11:[1,207],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{22:[1,208]},{11:[1,209]},{8:145,10:147,12:146,13:158,14:$VR,20:[1,210],30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:181,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},o($VO,[2,31]),o($Va,[2,10]),o($V21,[2,48]),o($V21,[2,52]),{10:49,14:$Vm,15:$Vv,23:211,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($V21,[2,59]),o($V21,[2,60]),{11:[1,212],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o($V21,[2,62]),{11:[1,213]},{11:[1,214]},{11:$Vk,22:$Vl},{10:49,14:$Vm,15:$Vv,23:215,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:216,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:217,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{8:219,12:220,13:158,14:$V2,30:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,88:218},{8:145,10:147,12:146,13:158,14:$VR,19:221,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:144,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{10:49,14:$Vm,15:$Vv,23:222,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{11:[1,223],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{26:[1,224]},{20:[1,225],39:[1,226]},o($V31,[2,41],{31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM}),{8:145,10:147,12:146,13:158,14:$VR,20:[1,227],30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:181,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},o($Va,[2,12]),{30:[1,228]},{11:[1,229],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o($Vw,[2,26]),{27:[1,230]},o($Vw,[2,28]),{10:49,14:$Vm,15:$Vv,23:231,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($Vw,[2,29]),o($Va,[2,9]),{17:[1,232],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o($V21,[2,61]),o($V21,[2,63]),o($V21,[2,64]),{17:[1,233],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{17:[1,234],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{17:[1,235],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,14:$Vm,15:$Vv,23:236,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($V41,[2,102]),o($V41,[2,103]),{8:145,10:147,12:146,13:158,14:$VR,20:[1,237],30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:181,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{11:[1,238],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o($Vw,[2,15]),{10:49,14:$Vm,15:$Vv,23:239,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{11:[1,240]},{10:49,14:$Vm,15:$Vv,23:241,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($Va,[2,11]),{31:[1,242]},o($Vw,[2,27]),o($VN,[2,77]),{11:[1,243],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{11:[1,244]},{18:[1,245]},{18:[1,246]},{18:[1,247]},{11:[1,248],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{85:[1,249]},o($Vw,[2,16]),{27:[1,250],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o($Vw,[2,18]),o($V31,[2,40],{31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM}),{13:251,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9},o($Vw,[2,30]),o($V21,[2,58]),{8:145,10:147,12:146,13:158,14:$VR,19:252,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:144,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{80:253,81:254,82:255,83:$V51,84:$V61},{8:145,10:147,12:146,13:158,14:$VR,19:258,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:144,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{14:[1,260],89:259},{15:[1,261]},{11:[1,262]},{32:[1,263]},{8:145,10:147,12:146,13:158,14:$VR,20:[1,264],30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:181,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{20:[1,266],81:265,82:267,83:$V51,84:$V61},{20:[1,268]},o($V71,[2,96]),{25:[1,269]},{10:49,14:$Vm,15:$Vv,23:270,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{8:145,10:147,12:146,13:158,14:$VR,20:[1,271],30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:181,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{17:[1,272]},{22:[1,273],26:[1,274],37:[1,275],62:[1,276],63:[1,277]},{10:49,14:$Vm,15:$Vv,23:278,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($Vw,[2,17]),{11:[1,279]},o($V21,[2,89],{78:[1,280]}),{20:[1,281]},o($V21,[2,93]),o($V71,[2,95]),o($V21,[2,94]),{8:145,10:147,12:146,13:158,14:$VR,19:282,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:144,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{25:[1,283],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o($V21,[2,99]),{18:[1,284]},{10:49,14:$Vm,15:[1,286],23:285,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:287,26:[1,288],34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{38:[1,289]},{17:[2,110]},{17:[2,111]},{17:[1,290],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o($Vw,[2,19]),{18:[1,291],53:292,77:$VW},o($V21,[2,92]),{8:145,10:147,12:146,13:158,14:$VR,20:[2,98],30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:181,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{8:145,10:147,12:146,13:158,14:$VR,19:293,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:144,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{8:145,10:147,12:146,13:158,14:$VR,19:294,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:144,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{17:[2,104],24:[1,295],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,13:296,14:$Vm,15:$Vv,23:95,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{27:[1,297],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,14:$Vm,15:$Vv,23:298,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{15:[1,299]},{11:[1,300]},{8:145,10:147,12:146,13:158,14:$VR,19:301,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:144,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},o($V21,[2,91]),o($V71,[2,97],{8:145,12:146,10:147,53:148,54:149,55:150,56:151,57:152,13:158,52:181,14:$VR,30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_}),{8:145,10:147,12:146,13:158,14:$VR,20:[1,302],30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:181,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},{10:49,14:$Vm,15:$Vv,23:303,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{17:[1,304]},{22:[1,305]},{27:[1,306],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,14:$Vm,15:$Vv,23:307,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},o($V21,[2,100]),{8:145,10:147,12:146,13:158,14:$VR,20:[1,308],30:$V4,34:$Vb,35:$Vc,36:$Vd,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,52:181,53:148,54:149,55:150,56:151,57:152,58:$VS,59:$VT,60:$VU,61:$VV,77:$VW,79:$VX,85:$VY,86:$VZ,87:$V_},o($V21,[2,101]),{25:[1,309],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,14:$Vm,15:$Vv,23:310,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{10:49,14:$Vm,15:$Vv,23:311,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{27:[1,312]},{17:[1,313],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},o($V21,[2,90]),{10:49,14:$Vm,15:$Vv,23:314,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{17:[2,105],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{17:[2,107],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{22:[1,315]},{17:[2,108]},{17:[2,106],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM},{10:49,14:$Vm,15:$Vv,23:316,34:$Vb,35:$Vc,36:$Vd,45:47,46:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,65:$Vt,76:$Vu},{17:[2,109],31:$Vx,32:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM}],
defaultActions: {18:[2,1],276:[2,110],277:[2,111],313:[2,108]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Funcion} = require('../arbol/nodoAST.js');
    const {DeclaracionVariables} = require('../arbol/nodoAST.js');
    const {Retorno} = require('../arbol/nodoAST.js');
    const {Parametros} = require('../arbol/nodoAST.js');
    const {Expresion} = require('../arbol/nodoAST.js');
    const {Llamada, Largo, Tolower,Toupper} = require('../arbol/nodoAST.js');
    const {Vector} = require('../arbol/nodoAST.js');
    const {Lista} = require('../arbol/nodoAST.js');
    const {Asignacion} = require('../arbol/nodoAST.js');
    const {Imprimir} = require('../arbol/nodoAST.js');
    const {ActualizarLista} = require('../arbol/nodoAST.js');
    const {ExpresionLogica} = require('../arbol/nodoAST.js');
    const {Incremento} = require('../arbol/nodoAST.js');
    const {Decremento} = require('../arbol/nodoAST.js');
    const {ExpresionRelacional} = require('../arbol/nodoAST.js');
    const {InstruccionIf} = require('../arbol/nodoAST.js');
    const {IntruccionSwitch} = require('../arbol/nodoAST.js');
    const {InstruccionCase} = require('../arbol/nodoAST.js');
    const {BucleWhile} = require('../arbol/nodoAST.js');
    const {BucleFor} = require('../arbol/nodoAST.js');
    const {BucleDoWhile} = require('../arbol/nodoAST.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*comentario simple se ignora*/
break;
case 1:/*comentario compuesto se ignora*/
break;
case 2:/*espacio en blanco a ignorar*/
break;
case 3:
break;
case 4:
break;
case 5:return "INT";
break;
case 6:return "DOUBLE";
break;
case 7:return "BOOL";
break;
case 8:return "CHAR";
break;
case 9:return "STRING";
break;
case 10:return "TRUE";
break;
case 11:return "FALSE";
break;
case 12:return "IMPRIMIR";
break;
case 13:return "NUEVO";
break;
case 14:return "ADD";
break;
case 15:return "IF";
break;
case 16:return "ELSE";
break;
case 17:return "SWITCH";
break;
case 18:return "BREAK";
break;
case 19:return "CASE";
break;
case 20:return "DEFAULT";
break;
case 21:return "WHILE";
break;
case 22:return "FOR";
break;
case 23:return "DO";
break;
case 24:return "CONTINUE";
break;
case 25:return "VOID";
break;
case 26:return "RETURN";
break;
case 27:return "TO_UPPER";
break;
case 28:return "TO_LOWER";
break;
case 29:return "LENGTH";
break;
case 30:return "TRUNCATE";
break;
case 31:return "ROUND";
break;
case 32:return "TYPEOF";
break;
case 33:return "TO_STRING";
break;
case 34:return "TO_CHAR_ARRAY";
break;
case 35:return "MAIN";
break;
case 36:return "LISTA";
break;
case 37:return "MAYOR_IGUAL";
break;
case 38:return "MENOR_IGUAL";
break;
case 39:return "DOBLE_IGUAL";
break;
case 40:return "NEGACION_IGUAL";
break;
case 41:return "INCREMENTO";
break;
case 42:return "DECREMENTO";
break;
case 43:return "SUMA";
break;
case 44:return "RESTA";
break;
case 45:return "PUNTO_COMA";
break;
case 46:return "MULTIPLICACION";
break;
case 47:return "DIVISION";
break;
case 48:return "POTENCIA";
break;
case 49:return "MODULO";
break;
case 50:return "NEGACION";
break;
case 51:return "IGUAL";
break;
case 52:return "MENOR";
break;
case 53:return "MAYOR";
break;
case 54:return "TERNARIO";
break;
case 55:return "DOS_PUNTOS";
break;
case 56:return "OR";
break;
case 57:return "AND";
break;
case 58:return "PAR_ABRE";
break;
case 59:return "PAR_CIERRA";
break;
case 60:return "LLAVE_ABRE";
break;
case 61:return "LLAVE_CIERRA";
break;
case 62:return "PUNTO";
break;
case 63:return "COR_ABRE";
break;
case 64:return "COR_CIERRE";
break;
case 65:return "COMA";
break;
case 66:return "ID";
break;
case 67:return "DECIMAL";
break;
case 68:return "ENTERO";
break;
case 69:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 48; 
break;
case 70:cadena = ""; this.begin("string");
break;
case 71:cadena += yy_.yytext;
break;
case 72:cadena += "\"";
break;
case 73:cadena += "\n";
break;
case 74:cadena += "\t";
break;
case 75:cadena += "\\";
break;
case 76:cadena += "\'";
break;
case 77:yy_.yytext = cadena; this.popState(); return 49;
break;
case 78:console.log("Caracter no reconocido: ", yy_.yylloc.first_line, yy_.yylloc.first_column, "-", yy_.yylloc.last_column, "Error lexico", yy_.yytext);
break;
case 79:return 5;
break;
case 80:console.log("Caracter no reconocido: ", yy_.yylloc.first_line, yy_.yylloc.first_column, "-", yy_.yylloc.last_column, "Error lexico", yy_.yytext);
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:[\r\t]+)/i,/^(?:\n)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:break\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toUpper\b)/i,/^(?:toLower\b)/i,/^(?:length\b)/i,/^(?:Truncate\b)/i,/^(?:Round\b)/i,/^(?:Typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:Main\b)/i,/^(?:list\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:;)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\\r\n]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:["])/i,/^(?:[\r\n])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[71,72,73,74,75,76,77,78],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}