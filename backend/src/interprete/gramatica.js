/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,11],$V2=[1,9],$V3=[1,10],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[5,9,14,21,33,38,39,40,41,42],$Va=[1,22],$Vb=[1,25],$Vc=[1,26],$Vd=[14,17,28,35],$Ve=[1,28],$Vf=[1,30],$Vg=[1,31],$Vh=[1,40],$Vi=[1,38],$Vj=[1,42],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,37],$Vq=[1,55],$Vr=[5,9,14,20,21,33,38,39,40,41,42,54,78,80,84,85,86,87,90],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[11,17,26,27,29,34,35,43,55,56,57,58,61,62,64,65,66,67,68,69],$Vz=[11,17,20,26,27,29,34,35,43,55,56,57,58,61,62,64,65,66,67,68,69],$VA=[17,43],$VB=[11,17,27,43],$VC=[1,83],$VD=[1,82],$VE=[1,84],$VF=[1,85],$VG=[1,86],$VH=[1,87],$VI=[2,71],$VJ=[11,17,26,27,43],$VK=[1,93],$VL=[11,17,26,27,29,34,35,43,55,56,57,58,62,64,65,66,67,68,69],$VM=[1,140],$VN=[1,129],$VO=[1,141],$VP=[1,142],$VQ=[1,143],$VR=[1,144],$VS=[1,145],$VT=[1,154],$VU=[11,17,26,27,29,34,35,43,55,56,64,65,66,67,68,69],$VV=[11,17,26,27,43,68,69],$VW=[14,20,33,38,39,40,41,42,54,78,80,86,87,90],$VX=[14,20,33,38,39,40,41,42,54,78,80,84,85,86,87,90],$VY=[1,168],$VZ=[1,169],$V_=[1,170],$V$=[1,195],$V01=[1,196],$V11=[20,43],$V21=[11,14,17,20,33,38,39,40,41,42,54,78,80,84,85,86,87,90],$V31=[1,245],$V41=[20,85];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion_funcion":7,"declaracion_variable":8,"MAIN":9,"llamada_funcion":10,"PUNTO_COMA":11,"modificacion_vector_lista":12,"tipo":13,"ID":14,"PAR_ABRE":15,"parametros":16,"PAR_CIERRA":17,"LLAVE_ABRE":18,"declaraciones_locales_tipo":19,"LLAVE_CIERRA":20,"VOID":21,"declaraciones_locales_vacio":22,"IGUAL":23,"expresiones":24,"expresion_logica":25,"TERNARIO":26,"DOS_PUNTOS":27,"COR_ABRE":28,"COR_CIERRE":29,"NUEVO":30,"expresion":31,"lista_valores":32,"LISTA":33,"MENOR":34,"MAYOR":35,"PUNTO":36,"ADD":37,"INT":38,"DOUBLE":39,"BOOL":40,"CHAR":41,"STRING":42,"COMA":43,"valor":44,"DECIMAL":45,"ENTERO":46,"CARACTER":47,"CADENA":48,"TRUE":49,"FALSE":50,"declaracion_local_tipo":51,"declaracion_local_vacio":52,"sentencias":53,"RETURN":54,"SUMA":55,"RESTA":56,"MULTIPLICACION":57,"DIVISION":58,"INCREMENTO":59,"DECREMENTO":60,"POTENCIA":61,"MODULO":62,"expresion_relacional":63,"MAYOR_IGUAL":64,"MENOR_IGUAL":65,"DOBLE_IGUAL":66,"NEGACION_IGUAL":67,"AND":68,"OR":69,"NOT":70,"asignacion":71,"sentencia_condicional_if":72,"sentencia_condicional_switch":73,"sentencia_bucle_while":74,"sentencia_bucle_for":75,"sentencia_bucle_do_while":76,"argumentos":77,"IF":78,"ELSE":79,"SWITCH":80,"case_list":81,"default_case":82,"CASE":83,"BREAK":84,"DEFAULT":85,"WHILE":86,"FOR":87,"declaracion_variable_for":88,"actualizacion":89,"DO":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"MAIN",11:"PUNTO_COMA",14:"ID",15:"PAR_ABRE",17:"PAR_CIERRA",18:"LLAVE_ABRE",20:"LLAVE_CIERRA",21:"VOID",23:"IGUAL",26:"TERNARIO",27:"DOS_PUNTOS",28:"COR_ABRE",29:"COR_CIERRE",30:"NUEVO",33:"LISTA",34:"MENOR",35:"MAYOR",36:"PUNTO",37:"ADD",38:"INT",39:"DOUBLE",40:"BOOL",41:"CHAR",42:"STRING",43:"COMA",45:"DECIMAL",46:"ENTERO",47:"CARACTER",48:"CADENA",49:"TRUE",50:"FALSE",54:"RETURN",55:"SUMA",56:"RESTA",57:"MULTIPLICACION",58:"DIVISION",59:"INCREMENTO",60:"DECREMENTO",61:"POTENCIA",62:"MODULO",64:"MAYOR_IGUAL",65:"MENOR_IGUAL",66:"DOBLE_IGUAL",67:"NEGACION_IGUAL",68:"AND",69:"OR",70:"NOT",78:"IF",79:"ELSE",80:"SWITCH",83:"CASE",84:"BREAK",85:"DEFAULT",86:"WHILE",87:"FOR",90:"DO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,3],[6,1],[7,8],[7,7],[7,8],[7,7],[8,3],[8,5],[8,8],[8,9],[8,11],[8,9],[8,12],[12,7],[12,7],[12,9],[13,1],[13,1],[13,1],[13,1],[13,1],[16,4],[16,2],[32,3],[32,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[19,2],[19,1],[22,2],[22,1],[51,1],[51,3],[52,1],[52,2],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,1],[31,1],[31,1],[31,2],[31,2],[31,3],[31,3],[31,4],[31,6],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[25,3],[25,3],[25,2],[25,1],[24,1],[24,1],[53,1],[53,1],[53,2],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[71,4],[71,7],[71,8],[71,3],[71,3],[10,4],[10,3],[77,3],[77,1],[72,7],[72,11],[72,9],[73,8],[73,7],[73,7],[81,4],[81,6],[82,5],[74,7],[75,11],[76,9],[88,5],[88,8],[88,1],[89,2],[89,2],[89,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 30: case 38: case 40: case 89:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 7: case 31: case 32: case 33: case 34: case 35: case 36: case 41: case 43: case 70: case 71: case 72: case 73:
 this.$ = $$[$0]; 
break;
case 6:
 this.$ = $$[$0-1]; $$[$0-1].main = true; 
break;
case 8:
 this.$ = new Funcion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 9:
 this.$ = new Funcion($$[$0-6], $$[$0-5], [], $$[$0-1]); 
break;
case 10:
 this.$ = new Funcion("VOID", $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 11:
 this.$ = new Funcion("VOID", $$[$0-5], [], $$[$0-1]); 
break;
case 12:
 this.$ = new DeclaracionVariables($$[$0-2], $$[$0-1]); 
break;
case 13:
 this.$ = new DeclaracionVariables($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 14:
 this.$ = new DeclaracionVariables($$[$0-7], $$[$0-6], $$[$0-1], $$[$0-3]); 
break;
case 15:
 this.$ = new DeclaracionVariables($$[$0-8], $$[$0-7]); this.$.ternario($$[$0-5], $$[$0-3], $$[$0-1]);
break;
case 16: case 17: case 18: case 19: case 20: case 21:
 
break;
case 22:
 this.$ = "INT"; 
break;
case 23:
 this.$ = "DOUBLE"; 
break;
case 24:
 this.$ = "BOOL"; 
break;
case 25:
 this.$ = "CHAR"; 
break;
case 26:
 this.$ = "STRING"; 
break;
case 27:
 $$[$0-3].push(new Parametros($$[$0-1], $$[$0])); this.$ = $$[$0-3]; 
break;
case 28:
 this.$ = [new Parametros($$[$0-1], $$[$0])]; 
break;
case 29: case 88:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 37: case 39:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 42:
 this.$ = new Retorno($$[$0-1]); 
break;
case 44:
 this.$ = new Retorno(); 
break;
case 45:
 this.$ = new Expresion("SUMA", $$[$0-2], $$[$0]); 
break;
case 46:
 this.$ = new Expresion("RESTA", $$[$0-2], $$[$0]); 
break;
case 47:
 this.$ = new Expresion("UNARIO", $$[$0]); 
break;
case 48:
 this.$ = new Expresion("MULTIPLICACION", $$[$0-2], $$[$0]); 
break;
case 49:
 this.$ = new Expresion("DIVICION", $$[$0-2], $$[$0]); 
break;
case 50: case 74:
 this.$ = $$[$0-1]; 
break;
case 51:
 this.$ = new Expresion("VALOR", $$[$0]); 
break;
case 52:
 this.$ = new Expresion("ID", $$[$0]); 
break;
case 53:
 this.$ = new Expresion("LLAMADA", $$[$0]); 
break;
case 54: case 55: case 58: case 59: case 75: case 76: case 77: case 78: case 79: case 80:
  
break;
case 56:
 this.$ = new Expresion("POTENCIA", $$[$0-2], $$[$0]); 
break;
case 57:
 this.$ = new Expresion("MODULO", $$[$0-2], $$[$0]); 
break;
case 86:
 this.$ = new Llamada($$[$0-3], $$[$0-1]); 
break;
case 87:
 this.$ = new Llamada($$[$0-2]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,12:7,13:8,14:$V1,21:$V2,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8},{1:[3]},{5:[1,17],6:18,7:4,8:5,9:$V0,12:7,13:8,14:$V1,21:$V2,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),{10:19,14:[1,20]},o($V9,[2,7]),{14:[1,21],28:$Va},{14:[1,23]},{34:[1,24]},{28:$Vb,36:$Vc},o($Vd,[2,22]),o($Vd,[2,23]),o($Vd,[2,24]),o($Vd,[2,25]),o($Vd,[2,26]),{1:[2,1]},o($V9,[2,2]),{11:[1,27]},{15:$Ve},{11:$Vf,15:[1,29],23:$Vg},{29:[1,32]},{15:[1,33]},{13:34,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8},{10:41,14:$Vh,15:$Vi,28:[1,36],31:35,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{37:[1,48]},o($V9,[2,6]),{10:41,14:$Vh,15:$Vi,17:[1,50],24:51,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq,77:49},{13:58,16:56,17:[1,57],38:$V4,39:$V5,40:$V6,41:$V7,42:$V8},o($Vr,[2,12]),{10:41,14:$Vh,15:[1,60],24:59,25:61,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{14:[1,62]},{13:58,16:63,17:[1,64],38:$V4,39:$V5,40:$V6,41:$V7,42:$V8},{35:[1,65]},{29:[1,66],55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx},{10:41,14:$Vh,15:$Vi,31:73,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:74,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:75,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},o($Vy,[2,51]),o($Vy,[2,52],{15:$Ve,28:[1,78],59:[1,76],60:[1,77]}),o($Vy,[2,53]),o($Vz,[2,31]),o($Vz,[2,32]),o($Vz,[2,33]),o($Vz,[2,34]),o($Vz,[2,35]),o($Vz,[2,36]),{15:[1,79]},{17:[1,80],43:[1,81]},o($Vy,[2,87]),o($VA,[2,89]),o($VB,[2,70],{34:$VC,35:$VD,55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx,64:$VE,65:$VF,66:$VG,67:$VH}),o($VB,$VI),o($VJ,[2,69],{68:[1,88],69:[1,89]}),{10:41,14:$Vh,15:$Vi,31:91,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:90},{17:[1,92],43:$VK},{18:[1,94]},{14:[1,95]},{11:[1,96]},{10:41,13:97,14:$Vh,15:$Vi,31:75,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{11:$VI,26:[1,98]},{23:[1,99]},{17:[1,100],43:$VK},{18:[1,101]},{14:[1,102]},{23:[1,103]},{10:41,14:$Vh,15:$Vi,31:104,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:105,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:106,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:107,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:108,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:109,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{29:[1,110],55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx},o($VL,[2,47],{61:$Vw}),{17:[1,111],55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx},o($Vy,[2,54]),o($Vy,[2,55]),{10:41,14:$Vh,15:$Vi,28:[1,113],31:112,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,24:114,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},o($Vy,[2,86]),{10:41,14:$Vh,15:$Vi,24:115,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{10:41,14:$Vh,15:$Vi,31:116,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:117,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:118,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:119,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:120,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:121,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:91,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:122},{10:41,14:$Vh,15:$Vi,31:91,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:123},o($VJ,[2,68]),{34:$VC,35:$VD,55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx,64:$VE,65:$VF,66:$VG,67:$VH},{18:[1,124]},{13:125,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8},{8:130,10:132,12:138,13:139,14:$VM,19:126,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,51:127,53:128,54:$VN,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},o($VA,[2,28]),o($Vr,[2,13]),{17:[1,146]},{10:41,14:$Vh,15:$Vi,24:147,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{18:[1,149],30:[1,148]},{18:[1,150]},{8:130,10:132,12:138,13:139,14:$VM,22:151,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,52:152,53:153,54:$VT,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},{23:[1,155]},{10:41,14:$Vh,15:$Vi,24:156,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},o($VU,[2,45],{57:$Vu,58:$Vv,61:$Vw,62:$Vx}),o($VU,[2,46],{57:$Vu,58:$Vv,61:$Vw,62:$Vx}),o($VL,[2,48],{61:$Vw}),o($VL,[2,49],{61:$Vw}),o($VL,[2,56],{61:$Vw}),o($VL,[2,57],{61:$Vw}),{29:[1,157]},o($Vy,[2,50]),{29:[1,158],55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx},{10:41,14:$Vh,15:$Vi,31:159,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{17:[1,160]},o($VA,[2,88]),o($VV,[2,60],{55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx}),o($VV,[2,61],{55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx}),o($VV,[2,62],{55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx}),o($VV,[2,63],{55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx}),o($VV,[2,64],{55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx}),o($VV,[2,65],{55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx}),o($VJ,[2,66]),o($VJ,[2,67]),{8:130,10:132,12:138,13:139,14:$VM,19:161,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,51:127,53:128,54:$VN,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},{14:[1,162]},{8:130,10:132,12:138,13:139,14:$VM,20:[1,163],33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,51:164,53:128,54:$VN,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},o($VW,[2,38]),o($VW,[2,41]),{10:41,14:$Vh,15:$Vi,24:165,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},o($VX,[2,72]),o($VX,[2,73]),{11:[1,166]},o($VX,[2,75]),o($VX,[2,76]),o($VX,[2,77]),o($VX,[2,78]),o($VX,[2,79]),o($VX,[2,80]),{14:[1,167],28:$Va},{15:$Ve,23:$VY,28:$Vb,36:$Vc,59:$VZ,60:$V_},{15:[1,171]},{15:[1,172]},{15:[1,173]},{15:[1,174]},{18:[1,175]},{10:41,14:$Vh,15:$Vi,24:176,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{27:[1,177]},{13:178,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8},{32:179,44:180,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo},{8:130,10:132,12:138,13:139,14:$VM,22:181,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,52:152,53:153,54:$VT,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},{8:130,10:132,12:138,13:139,14:$VM,20:[1,182],33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,52:183,53:153,54:$VT,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},o($VW,[2,40]),o($VW,[2,43]),{11:[1,184]},{30:[1,185]},{11:[1,186]},{23:[1,187]},o($Vy,[2,58]),{29:[1,188],55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx},{11:[1,189]},{8:130,10:132,12:138,13:139,14:$VM,20:[1,190],33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,51:164,53:128,54:$VN,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},o($VA,[2,27]),o($V9,[2,9]),o($VW,[2,37]),{11:[1,191]},o($VX,[2,74]),{11:$Vf,23:$Vg},{10:41,14:$Vh,15:[1,193],24:192,25:194,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{11:$V$},{11:$V01},{10:41,14:$Vh,15:$Vi,25:197,31:91,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{10:41,14:$Vh,15:$Vi,24:198,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{10:41,14:$Vh,15:$Vi,24:199,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{13:201,14:[1,203],38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,71:202,88:200},{8:130,10:132,12:138,13:139,14:$VM,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,53:204,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},{11:[1,205]},{10:41,14:$Vh,15:$Vi,24:206,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{28:[1,207]},{20:[1,208],43:[1,209]},o($V11,[2,30]),{8:130,10:132,12:138,13:139,14:$VM,20:[1,210],33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,52:183,53:153,54:$VT,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},o($V9,[2,11]),o($VW,[2,39]),o($VW,[2,44]),{33:[1,211]},o($Vr,[2,19]),{10:41,14:$Vh,15:$Vi,24:212,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{29:[1,213]},o($Vr,[2,20]),o($V9,[2,8]),o($VW,[2,42]),{11:[1,214]},{10:41,13:215,14:$Vh,15:$Vi,31:75,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{11:$VI,26:[1,216]},o($V21,[2,84]),o($V21,[2,85]),{17:[1,217]},{17:[1,218]},{17:[1,219]},{11:[1,220]},{14:[1,221]},{11:[2,104]},{23:$VY,59:$VZ,60:$V_},{20:[1,222]},o($Vr,[2,14]),{11:[1,223]},{10:41,14:$Vh,15:$Vi,31:224,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{11:[1,225]},{44:226,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo},o($V9,[2,10]),{34:[1,227]},{11:[1,228]},o($Vy,[2,59]),o($V21,[2,81]),{17:[1,229]},{10:41,14:$Vh,15:$Vi,24:230,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{18:[1,231]},{18:[1,232]},{18:[1,233]},{10:41,14:$Vh,15:$Vi,25:234,31:91,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{23:[1,235]},{86:[1,236]},o($Vr,[2,15]),{29:[1,237],55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx},o($Vr,[2,17]),o($V11,[2,29]),{13:238,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8},o($Vr,[2,21]),{10:41,14:$Vh,15:$Vi,24:239,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{27:[1,240]},{8:130,10:132,12:138,13:139,14:$VM,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,53:241,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},{81:242,82:243,83:[1,244],85:$V31},{8:130,10:132,12:138,13:139,14:$VM,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,53:246,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},{11:[1,247]},{10:41,14:$Vh,15:[1,249],24:248,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{15:[1,250]},{11:[1,251]},{35:[1,252]},{11:[1,253]},{10:41,14:$Vh,15:$Vi,24:254,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{20:[1,255]},{20:[1,257],82:256,85:$V31},{20:[1,258]},{10:41,14:$Vh,15:$Vi,24:259,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{27:[1,260]},{20:[1,261]},{14:[1,263],71:264,89:262},{11:[1,265]},{10:41,13:266,14:$Vh,15:$Vi,31:75,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},{10:41,14:$Vh,15:$Vi,31:267,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp},o($Vr,[2,16]),{11:[1,268]},o($V21,[2,82]),{11:[1,269]},o($VX,[2,90],{79:[1,270]}),{20:[1,271]},o($VX,[2,94]),o($VX,[2,95]),{27:[1,272]},{8:130,10:132,12:138,13:139,14:$VM,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,53:273,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},o($VX,[2,99]),{17:[1,274]},{23:$VY,59:[1,276],60:[1,275]},{17:[2,107]},{11:[2,102]},{17:[1,277]},{17:[1,278],55:$Vs,56:$Vt,57:$Vu,58:$Vv,61:$Vw,62:$Vx},o($Vr,[2,18]),o($V21,[2,83]),{18:[1,279],72:280,78:$VO},o($VX,[2,93]),{8:130,10:132,12:138,13:139,14:$VM,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,53:281,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},{84:[1,282]},{18:[1,283]},{11:$V01,17:[2,105]},{11:$V$,17:[2,106]},{10:41,14:$Vh,15:$Vi,24:284,25:53,31:52,44:39,45:$Vj,46:$Vk,47:$Vl,48:$Vm,49:$Vn,50:$Vo,56:$Vp,63:54,70:$Vq},{11:[1,285]},{8:130,10:132,12:138,13:139,14:$VM,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,53:286,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},o($VX,[2,92]),o($V41,[2,96],{84:[1,287]}),{11:[1,288]},{8:130,10:132,12:138,13:139,14:$VM,33:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,53:289,71:131,72:133,73:134,74:135,75:136,76:137,78:$VO,80:$VP,86:$VQ,87:$VR,90:$VS},{11:[1,290]},o($VX,[2,101]),{20:[1,291]},{11:[1,292]},{20:[2,98]},{20:[1,293]},{11:[2,103]},o($VX,[2,91]),o($V41,[2,97]),o($VX,[2,100])],
defaultActions: {17:[2,1],202:[2,104],264:[2,107],265:[2,102],288:[2,98],290:[2,103]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Funcion} = require('../arbol/nodoAST.js');
    const {DeclaracionVariables} = require('../arbol/nodoAST.js');
    const {ExpresionLogica} = require('../arbol/nodoAST.js');
    const {Retorno} = require('../arbol/nodoAST.js');
    const {Parametros} = require('../arbol/nodoAST.js');
    const {DeclararArray} = require('../arbol/nodoAST.js');
    const {Expresion} = require('../arbol/nodoAST.js');
    const {Llamada} = require('../arbol/nodoAST.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*comentario simple se ignora*/
break;
case 1:/*comentario compuesto se ignora*/
break;
case 2:/*espacio en blanco a ignorar*/
break;
case 3:
break;
case 4:
break;
case 5:return "INT";
break;
case 6:return "DOUBLE";
break;
case 7:return "BOOL";
break;
case 8:return "CHAR";
break;
case 9:return "STRING";
break;
case 10:return "TRUE";
break;
case 11:return "FALSE";
break;
case 12:return "IMPRIMIR";
break;
case 13:return "NUEVO";
break;
case 14:return "ADD";
break;
case 15:return "IF";
break;
case 16:return "ELSE";
break;
case 17:return "SWITCH";
break;
case 18:return "BREAK";
break;
case 19:return "CASE";
break;
case 20:return "DEFAULT";
break;
case 21:return "WHILE";
break;
case 22:return "FOR";
break;
case 23:return "DO";
break;
case 24:return "CONTINUE";
break;
case 25:return "VOID";
break;
case 26:return "RETURN";
break;
case 27:return "TO_UPPER";
break;
case 28:return "LENGTH";
break;
case 29:return "TRUNCATE";
break;
case 30:return "ROUND";
break;
case 31:return "TYPEOF";
break;
case 32:return "TO_STRING";
break;
case 33:return "TO_CHAR_ARRAY";
break;
case 34:return "MAIN";
break;
case 35:return "LISTA";
break;
case 36:return "MAYOR_IGUAL";
break;
case 37:return "MENOR_IGUAL";
break;
case 38:return "DOBLE_IGUAL";
break;
case 39:return "NEGACION_IGUAL";
break;
case 40:return "DECREMENTO";
break;
case 41:return "INCREMENTO";
break;
case 42:return "SUMA";
break;
case 43:return "RESTA";
break;
case 44:return "PUNTO_COMA";
break;
case 45:return "MULTIPLICACION";
break;
case 46:return "DIVISION";
break;
case 47:return "POTENCIA";
break;
case 48:return "MODULO";
break;
case 49:return "NEGACION";
break;
case 50:return "IGUAL";
break;
case 51:return "MENOR";
break;
case 52:return "MAYOR";
break;
case 53:return "TERNARIO";
break;
case 54:return "DOS_PUNTOS";
break;
case 55:return "OR";
break;
case 56:return "AND";
break;
case 57:return "PAR_ABRE";
break;
case 58:return "PAR_CIERRA";
break;
case 59:return "LLAVE_ABRE";
break;
case 60:return "LLAVE_CIERRA";
break;
case 61:return "PUNTO";
break;
case 62:return "COR_ABRE";
break;
case 63:return "COR_CIERRE";
break;
case 64:return "COMA";
break;
case 65:return "ID";
break;
case 66:return "DECIMAL";
break;
case 67:return "ENTERO";
break;
case 68:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 47; 
break;
case 69:cadena = ""; this.begin("string");
break;
case 70:cadena += yy_.yytext;
break;
case 71:cadena += "\"";
break;
case 72:cadena += "\n";
break;
case 73:cadena += "\t";
break;
case 74:cadena += "\\";
break;
case 75:cadena += "\'";
break;
case 76:yy_.yytext = cadena; this.popState(); return 48;
break;
case 77:console.log("Caracter no reconocido: ", yy_.yylloc.first_line, yy_.yylloc.first_column, "-", yy_.yylloc.last_column, "Error lexico", yy_.yytext);
break;
case 78:return 5;
break;
case 79:console.log("Caracter no reconocido: ", yy_.yylloc.first_line, yy_.yylloc.first_column, "-", yy_.yylloc.last_column, "Error lexico", yy_.yytext);
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:[\r\t]+)/i,/^(?:\n)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:break\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toUpper\b)/i,/^(?:Length\b)/i,/^(?:Truncate\b)/i,/^(?:Round\b)/i,/^(?:Typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:Main\b)/i,/^(?:list\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:;)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\\r\n]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:["])/i,/^(?:[\r\n])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[70,71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}