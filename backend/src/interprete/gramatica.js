/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,12],$V2=[1,10],$V3=[1,11],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[5,9,14,21,28,43,44,45,46,47],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,28],$Vh=[1,30],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[14,17,24,30],$Vm=[1,37],$Vn=[1,46],$Vo=[1,47],$Vp=[1,55],$Vq=[1,53],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,61],$Vv=[1,62],$Vw=[1,63],$Vx=[1,52],$Vy=[1,57],$Vz=[5,9,14,15,20,21,28,33,34,35,36,37,38,39,43,44,45,46,47,49,50,51,52,53,54,61,62,63,64,68,79,82,84,88,89,90,91,92],$VA=[1,93],$VB=[1,92],$VC=[1,100],$VD=[1,101],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[1,98],$VP=[1,99],$VQ=[1,102],$VR=[11,17,20,25,29,30,42,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81],$VS=[17,42],$VT=[1,121],$VU=[11,17,20,25,42,77,78,80,81],$VV=[1,168],$VW=[1,164],$VX=[1,165],$VY=[1,166],$VZ=[1,167],$V_=[1,170],$V$=[1,171],$V01=[1,172],$V11=[1,174],$V21=[1,173],$V31=[11,17,20,25,29,30,42,67,68,73,74,75,76,77,78,80,81],$V41=[11,17,20,25,29,30,42,67,68,69,70,72,73,74,75,76,77,78,80,81],$V51=[11,17,20,25,29,30,42,73,74,75,76,77,78,80,81],$V61=[14,20,28,33,34,35,36,37,38,39,43,44,45,46,47,61,62,63,64,82,84,88,89,90,91,92],$V71=[20,42],$V81=[14,15,33,34,35,36,37,38,39,49,50,51,52,53,54,68,79],$V91=[1,263],$Va1=[1,262],$Vb1=[20,88,89];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion_funcion":7,"declaracion_variable":8,"MAIN":9,"llamada_funcion":10,"PUNTO_COMA":11,"asignacion":12,"tipo":13,"ID":14,"PAR_ABRE":15,"parametros":16,"PAR_CIERRA":17,"LLAVE_ABRE":18,"declaraciones_locales":19,"LLAVE_CIERRA":20,"VOID":21,"IGUAL":22,"expresion":23,"COR_ABRE":24,"COR_CIERRE":25,"NUEVO":26,"lista_valores":27,"LISTA":28,"MENOR":29,"MAYOR":30,"TO_CHAR_ARRAY":31,"argumentos":32,"LENGTH":33,"TO_LOWER":34,"TO_UPPER":35,"TRUNCATE":36,"ROUND":37,"TYPEOF":38,"TO_STRING":39,"PUNTO":40,"ADD":41,"COMA":42,"INT":43,"DOUBLE":44,"BOOL":45,"CHAR":46,"STRING":47,"valor":48,"DECIMAL":49,"ENTERO":50,"CARACTER":51,"CADENA":52,"TRUE":53,"FALSE":54,"sentencias":55,"sentencia_condicional_if":56,"sentencia_condicional_switch":57,"sentencia_bucle_while":58,"sentencia_bucle_for":59,"sentencia_bucle_do_while":60,"IMPRIMIR":61,"BREAK":62,"CONTINUE":63,"RETURN":64,"INCREMENTO":65,"DECREMENTO":66,"SUMA":67,"RESTA":68,"MULTIPLICACION":69,"DIVISION":70,"POTENCIA":71,"MODULO":72,"MAYOR_IGUAL":73,"MENOR_IGUAL":74,"DOBLE_IGUAL":75,"NEGACION_IGUAL":76,"AND":77,"OR":78,"NEGACION":79,"TERNARIO":80,"DOS_PUNTOS":81,"IF":82,"ELSE":83,"SWITCH":84,"case_list":85,"default_case":86,"case":87,"CASE":88,"DEFAULT":89,"WHILE":90,"DO":91,"FOR":92,"declaracion_variable_for":93,"actualizacion":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"MAIN",11:"PUNTO_COMA",14:"ID",15:"PAR_ABRE",17:"PAR_CIERRA",18:"LLAVE_ABRE",20:"LLAVE_CIERRA",21:"VOID",22:"IGUAL",24:"COR_ABRE",25:"COR_CIERRE",26:"NUEVO",28:"LISTA",29:"MENOR",30:"MAYOR",31:"TO_CHAR_ARRAY",33:"LENGTH",34:"TO_LOWER",35:"TO_UPPER",36:"TRUNCATE",37:"ROUND",38:"TYPEOF",39:"TO_STRING",40:"PUNTO",41:"ADD",42:"COMA",43:"INT",44:"DOUBLE",45:"BOOL",46:"CHAR",47:"STRING",49:"DECIMAL",50:"ENTERO",51:"CARACTER",52:"CADENA",53:"TRUE",54:"FALSE",61:"IMPRIMIR",62:"BREAK",63:"CONTINUE",64:"RETURN",65:"INCREMENTO",66:"DECREMENTO",67:"SUMA",68:"RESTA",69:"MULTIPLICACION",70:"DIVISION",71:"POTENCIA",72:"MODULO",73:"MAYOR_IGUAL",74:"MENOR_IGUAL",75:"DOBLE_IGUAL",76:"NEGACION_IGUAL",77:"AND",78:"OR",79:"NEGACION",80:"TERNARIO",81:"DOS_PUNTOS",82:"IF",83:"ELSE",84:"SWITCH",88:"CASE",89:"DEFAULT",90:"WHILE",91:"DO",92:"FOR"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,3],[6,1],[7,8],[7,7],[7,8],[7,7],[8,3],[8,5],[8,11],[8,9],[8,12],[8,11],[10,4],[10,3],[10,4],[10,4],[10,4],[10,4],[10,4],[10,4],[10,4],[12,4],[12,7],[12,7],[12,9],[16,4],[16,2],[13,1],[13,1],[13,1],[13,1],[13,1],[32,3],[32,1],[27,3],[27,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[19,2],[19,1],[55,1],[55,1],[55,2],[55,1],[55,1],[55,1],[55,1],[55,1],[55,5],[55,2],[55,2],[55,3],[55,2],[55,3],[55,3],[23,3],[23,3],[23,2],[23,3],[23,3],[23,3],[23,1],[23,1],[23,1],[23,3],[23,3],[23,4],[23,6],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,2],[23,5],[23,4],[56,7],[56,11],[56,9],[57,8],[57,7],[57,7],[85,2],[85,1],[87,4],[86,3],[58,7],[60,9],[59,10],[93,1],[93,1],[94,3],[94,6],[94,6],[94,8],[94,2],[94,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

                errores.push(new Errores("Sintactico", "Error sintactico " + yytext, this._$.first_line, this._$.first_column));
                return errores;
            
break;
case 3:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4: case 40: case 42: case 50: case 99:
 this.$ = [$$[$0]]; 
break;
case 5: case 6: case 8: case 45: case 46: case 51: case 52: case 54: case 55: case 56: case 57: case 58: case 101: case 105: case 106:
 this.$ = $$[$0]; 
break;
case 7:
 this.$ = $$[$0-1]; $$[$0-1].main = true; 
break;
case 9:
 this.$ = new Funcion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 10:
 this.$ = new Funcion($$[$0-6], $$[$0-5], [], $$[$0-1]); 
break;
case 11:
 this.$ = new Funcion("VOID", $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 12:
 this.$ = new Funcion("VOID", $$[$0-5], [], $$[$0-1]); 
break;
case 13:
 this.$ = new DeclaracionVariables($$[$0-2], $$[$0-1]); 
break;
case 14:
 this.$ = new DeclaracionVariables($$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 15:
 this.$ = new Vector($$[$0-10], $$[$0-7], $$[$0-4], $$[$0-2]); 
break;
case 16:
 this.$ = new Vector($$[$0-8], $$[$0-5], $$[$0-8], null, $$[$0-2]); 
break;
case 17:
 this.$ = new Lista($$[$0-9], $$[$0-7], $$[$0-2]); 
break;
case 18:
 this.$ = new Lista($$[$0-8], $$[$0-6], "", $$[$0-2]); 
break;
case 19:
 this.$ = new Llamada($$[$0-3], $$[$0-1]); 
break;
case 20:
 this.$ = new Llamada($$[$0-2]); 
break;
case 21:
 this.$ = new Largo($$[$0-1]); 
break;
case 22:
 this.$ = new Tolower($$[$0-1]); 
break;
case 23:
 this.$ = new Toupper($$[$0-1]); 
break;
case 24:
 this.$ = new Truncate($$[$0-1]); 
break;
case 25:
 this.$ = new Round($$[$0-1]); 
break;
case 26:
 this.$ = new TipoDeDato($$[$0-1]); 
break;
case 27:
 this.$ = new HacerString($$[$0-1]); 
break;
case 28:
 this.$ = new Asignacion($$[$0-3], $$[$0-1]); 
break;
case 29:
 this.$ = new Asignacion($$[$0-6], $$[$0-1], null, $$[$0-4]); 
break;
case 30:
 this.$ = new ActualizarLista($$[$0-6], $$[$0-2]); 
break;
case 31:
 this.$ = new ActualizarLista($$[$0-8], $$[$0-1], $$[$0-5]); 
break;
case 32:
 $$[$0-3].push(new Parametros($$[$0-1], $$[$0])); this.$ = $$[$0-3]; 
break;
case 33:
 this.$ = [new Parametros($$[$0-1], $$[$0])]; 
break;
case 34:
 this.$ = "INT"; 
break;
case 35:
 this.$ = "DOUBLE"; 
break;
case 36:
 this.$ = "BOOL"; 
break;
case 37:
 this.$ = "CHAR"; 
break;
case 38:
 this.$ = "STRING"; 
break;
case 39: case 41:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 43:
 this.$ = parseFloat($$[$0]); 
break;
case 44:
 this.$ = parseInt($$[$0]); 
break;
case 47:
 this.$ = true; 
break;
case 48:
 this.$ = false; 
break;
case 49: case 98:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 53:
 this.$ = $$[$0-1]; 
break;
case 59:
 this.$ = new Imprimir($$[$0-2]); 
break;
case 60:
 this.$ = "BREAK"; 
break;
case 61:
 this.$ = "CONTINUE"; 
break;
case 62:
 this.$ = new Retorno($$[$0-1]); 
break;
case 63:
 this.$ = new Retorno(); 
break;
case 64:
 this.$ = new Incremento($$[$0-2]); 
break;
case 65:
 this.$ = new Decremento($$[$0-2]); 
break;
case 66:
 this.$ = new Expresion("SUMA", $$[$0-2], $$[$0]); 
break;
case 67:
 this.$ = new Expresion("RESTA", $$[$0-2], $$[$0]); 
break;
case 68:
 this.$ = new Expresion("UNARIO", $$[$0]); 
break;
case 69:
 this.$ = new Expresion("MULTIPLICACION", $$[$0-2], $$[$0]); 
break;
case 70:
 this.$ = new Expresion("DIVICION", $$[$0-2], $$[$0]); 
break;
case 71:
 this.$ = new Expresion("PAR", $$[$0-1]); 
break;
case 72:
 this.$ = new Expresion("VALOR", $$[$0]); 
break;
case 73:
 this.$ = new Expresion("ID", $$[$0]); 
break;
case 74:
 this.$ = new Expresion("LLAMADA", $$[$0]); 
break;
case 75:
 this.$ = new Expresion("POTENCIA", $$[$0-2], $$[$0]); 
break;
case 76:
 this.$ = new Expresion("MODULO", $$[$0-2], $$[$0]); 
break;
case 77:
 this.$ = new Expresion("VECTOR", $$[$0-3], $$[$0-1]); 
break;
case 78:
 this.$ = new Expresion("LISTA", $$[$0-5], $$[$0-2]); 
break;
case 79:
 this.$ = new ExpresionRelacional("MAYOR", $$[$0-2], $$[$0]); 
break;
case 80:
 this.$ = new ExpresionRelacional("MENOR", $$[$0-2], $$[$0]); 
break;
case 81:
 this.$ = new ExpresionRelacional("MAYOR_IGUAL", $$[$0-2], $$[$0]); 
break;
case 82:
 this.$ = new ExpresionRelacional("MENOR_IGUAL", $$[$0-2], $$[$0]); 
break;
case 83:
 this.$ = new ExpresionRelacional("DOBLE_IGUAL", $$[$0-2], $$[$0]); 
break;
case 84:
 this.$ = new ExpresionRelacional("NEGACION_IGUAL", $$[$0-2], $$[$0]); 
break;
case 85:
 this.$ = new ExpresionLogica("AND", $$[$0-2], $$[$0]); 
break;
case 86:
 this.$ = new ExpresionLogica("OR", $$[$0-2], $$[$0]); 
break;
case 87:
 this.$ = new ExpresionLogica("NEGACION", $$[$0]); 
break;
case 88:
 this.$ = new Expresion("INCREMENTO", $$[$0-1]); 
break;
case 89:
 this.$ = new Expresion("DECREMENTO", $$[$0-1]); 
break;
case 90:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 91:
 this.$ = new Casteo($$[$0-2], $$[$0]); 
break;
case 92:
 this.$ = new InstruccionIf($$[$0-4], $$[$0-1]); 
break;
case 93:
 this.$ = new InstruccionIf($$[$0-8], $$[$0-5], $$[$0-1]); 
break;
case 94:
 this.$ = new InstruccionIf($$[$0-6], $$[$0-3], [], $$[$0]); 
break;
case 95:
 this.$ = new IntruccionSwitch($$[$0-5], $$[$0-2], $$[$0-1]); 
break;
case 96:
 this.$ = new IntruccionSwitch($$[$0-4], $$[$0-1]); 
break;
case 97:
 this.$ = new IntruccionSwitch($$[$0-4], [], $$[$0-1]); 
break;
case 100:
 this.$ = new InstruccionCase($$[$0-2], $$[$0]); 
break;
case 102:
 this.$ = new BucleWhile($$[$0-4], $$[$0-1]); 
break;
case 103:
 this.$ = new BucleDoWhile($$[$0-2], $$[$0-6]); 
break;
case 104:
 this.$ = new BucleFor($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 107:
 this.$ = new Asignacion($$[$0-2], $$[$0]); 
break;
case 108:
 this.$ = new Asignacion($$[$0-5], $$[$0], null, $$[$0-3]); 
break;
case 109:
 this.$ = new ActualizarLista($$[$0-5], $$[$0-1]); 
break;
case 110:
 this.$ = new ActualizarLista($$[$0-7], $$[$0], $$[$0-4]); 
break;
case 111:
 this.$ = new Incremento($$[$0-1]); 
break;
case 112:
 this.$ = new Decremento($$[$0-1]); 
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:$V0,12:8,13:9,14:$V1,21:$V2,28:$V3,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8},{1:[3]},{5:[1,18],6:19,7:5,8:6,9:$V0,12:8,13:9,14:$V1,21:$V2,28:$V3,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8},{1:[2,2]},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),{10:20,14:[1,21],33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg},o($V9,[2,8]),{14:[1,29],24:$Vh},{14:[1,31]},{29:[1,32]},{22:$Vi,24:$Vj,40:$Vk},o($Vl,[2,34]),o($Vl,[2,35]),o($Vl,[2,36]),o($Vl,[2,37]),o($Vl,[2,38]),{1:[2,1]},o($V9,[2,3]),{11:[1,36]},{15:$Vm},{15:[1,38]},{15:[1,39]},{15:[1,40]},{15:[1,41]},{15:[1,42]},{15:[1,43]},{15:[1,44]},{11:$Vn,15:[1,45],22:$Vo},{25:[1,48]},{15:[1,49]},{13:50,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8},{10:56,14:$Vp,15:$Vq,23:51,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:64,24:[1,65],33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{41:[1,66]},o($V9,[2,7]),{10:56,14:$Vp,15:$Vq,17:[1,68],23:69,32:67,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:70,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:71,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:72,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:73,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:74,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:75,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:76,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{13:79,16:77,17:[1,78],43:$V4,44:$V5,45:$V6,46:$V7,47:$V8},o($Vz,[2,13]),{10:56,14:$Vp,15:$Vq,23:80,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{14:[1,81]},{13:79,16:82,17:[1,83],43:$V4,44:$V5,45:$V6,46:$V7,47:$V8},{30:[1,84]},{11:[1,85],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{10:56,14:$Vp,15:$Vq,23:103,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,13:105,14:$Vp,15:$Vq,23:104,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($VR,[2,72]),o($VR,[2,73],{15:$Vm,24:[1,106]}),o($VR,[2,74]),{10:56,14:$Vp,15:$Vq,23:107,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($VR,[2,43]),o($VR,[2,44]),o($VR,[2,45]),o($VR,[2,46]),o($VR,[2,47]),o($VR,[2,48]),{25:[1,108],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{10:56,14:$Vp,15:$Vq,23:109,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{15:[1,110]},{17:[1,111],42:[1,112]},o($VR,[2,20]),o($VS,[2,40],{29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ}),{17:[1,113],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{17:[1,114],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{17:[1,115],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{17:[1,116],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{17:[1,117],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{17:[1,118],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{17:[1,119],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{17:[1,120],42:$VT},{18:[1,122]},{14:[1,123]},{11:[1,124],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{22:[1,125]},{17:[1,126],42:$VT},{18:[1,127]},{14:[1,128]},o($Vz,[2,28]),{10:56,14:$Vp,15:$Vq,23:129,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:130,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:131,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:132,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:133,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:134,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:135,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:136,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:137,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:138,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:139,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:140,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:141,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:142,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($VR,[2,88]),o($VR,[2,89]),{10:56,14:$Vp,15:$Vq,23:143,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o([11,17,20,25,29,30,42,67,68,69,70,71,72,73,74,75,76,77,78,80,81],[2,68],{65:$VC,66:$VD}),{17:[1,144],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{17:[1,145]},{10:56,14:$Vp,15:$Vq,23:146,24:[1,147],33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($VU,[2,87],{29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),{22:[1,148]},{25:[1,149],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{10:56,14:$Vp,15:$Vq,23:150,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($VR,[2,19]),{10:56,14:$Vp,15:$Vq,23:151,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($VR,[2,21]),o($VR,[2,22]),o($VR,[2,23]),o($VR,[2,24]),o($VR,[2,25]),o($VR,[2,26]),o($VR,[2,27]),{18:[1,152]},{13:153,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8},{8:156,10:158,12:157,13:169,14:$VV,19:154,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:155,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},o($VS,[2,33]),o($Vz,[2,14]),{18:[1,176],26:[1,175]},{18:[1,177]},{8:156,10:158,12:157,13:169,14:$VV,19:178,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:155,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{22:[1,179]},o($V31,[2,66],{65:$VC,66:$VD,69:$VG,70:$VH,71:$VI,72:$VJ}),o($V31,[2,67],{65:$VC,66:$VD,69:$VG,70:$VH,71:$VI,72:$VJ}),o($V41,[2,69],{65:$VC,66:$VD,71:$VI}),o($V41,[2,70],{65:$VC,66:$VD,71:$VI}),o($V41,[2,75],{65:$VC,66:$VD}),o($V41,[2,76],{65:$VC,66:$VD,71:$VI}),o($V51,[2,79],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ}),o($V51,[2,80],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ}),o($V51,[2,81],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ}),o($V51,[2,82],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ}),o($V51,[2,83],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ}),o($V51,[2,84],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ}),o($VU,[2,85],{29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN}),o([11,17,20,25,42,78,80,81],[2,86],{29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO}),{29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ,81:[1,180]},o($VR,[2,71]),{10:56,14:$Vp,15:$Vq,23:181,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{25:[1,182],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{10:56,14:$Vp,15:$Vq,23:183,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:184,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{25:[1,185]},{17:[1,186],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},o($VS,[2,39],{29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ}),{8:156,10:158,12:157,13:169,14:$VV,19:187,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:155,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{14:[1,188]},{8:156,10:158,12:157,13:169,14:$VV,20:[1,189],28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:190,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},o($V61,[2,50]),o($V61,[2,51]),o($V61,[2,52]),{11:[1,191]},o($V61,[2,54]),o($V61,[2,55]),o($V61,[2,56]),o($V61,[2,57]),o($V61,[2,58]),{15:[1,192]},{11:[1,193]},{11:[1,194]},{10:56,11:[1,196],14:$Vp,15:$Vq,23:195,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{15:$Vm,22:$Vi,24:$Vj,40:$Vk,65:[1,197],66:[1,198]},{14:[1,199],24:$Vh},{15:[1,200]},{15:[1,201]},{15:[1,202]},{15:[1,203]},{18:[1,204]},{13:205,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8},{10:56,14:$Vp,15:$Vq,23:207,27:206,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{8:156,10:158,12:157,13:169,14:$VV,19:208,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:155,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{8:156,10:158,12:157,13:169,14:$VV,20:[1,209],28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:190,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{26:[1,210],31:[1,211]},{10:56,14:$Vp,15:$Vq,23:212,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($VR,[2,91]),o($VR,[2,77]),{25:[1,213],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{11:[1,214],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{22:[1,215]},{11:[1,216]},{8:156,10:158,12:157,13:169,14:$VV,20:[1,217],28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:190,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},o($VS,[2,32]),o($V9,[2,10]),o($V61,[2,49]),o($V61,[2,53]),{10:56,14:$Vp,15:$Vq,23:218,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($V61,[2,60]),o($V61,[2,61]),{11:[1,219],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},o($V61,[2,63]),{11:[1,220]},{11:[1,221]},{11:$Vn,22:$Vo},{10:56,14:$Vp,15:$Vq,23:222,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:223,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:224,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{8:226,12:227,13:169,14:$V1,28:$V3,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,93:225},{8:156,10:158,12:157,13:169,14:$VV,19:228,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:155,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{24:[1,229]},{20:[1,230],42:[1,231]},o($V71,[2,42],{29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ}),{8:156,10:158,12:157,13:169,14:$VV,20:[1,232],28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:190,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},o($V9,[2,12]),{28:[1,233]},{15:[1,234]},o([11,17,20,25,42,80,81],[2,90],{29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP}),{25:[1,235]},o($Vz,[2,29]),{10:56,14:$Vp,15:$Vq,23:236,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($Vz,[2,30]),o($V9,[2,9]),{17:[1,237],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},o($V61,[2,62]),o($V61,[2,64]),o($V61,[2,65]),{17:[1,238],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{17:[1,239],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{17:[1,240],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{10:56,14:$Vp,15:$Vq,23:241,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($V81,[2,105]),o($V81,[2,106]),{8:156,10:158,12:157,13:169,14:$VV,20:[1,242],28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:190,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{10:56,14:$Vp,15:$Vq,23:243,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{11:[1,244]},{10:56,14:$Vp,15:$Vq,23:245,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($V9,[2,11]),{29:[1,246]},{10:56,14:$Vp,15:$Vq,23:247,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($VR,[2,78]),{11:[1,248],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{11:[1,249]},{18:[1,250]},{18:[1,251]},{18:[1,252]},{11:[1,253],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{90:[1,254]},{25:[1,255],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},o($Vz,[2,16]),o($V71,[2,41],{29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ}),{13:256,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8},{17:[1,257],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},o($Vz,[2,31]),o($V61,[2,59]),{8:156,10:158,12:157,13:169,14:$VV,19:258,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:155,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{85:259,86:260,87:261,88:$V91,89:$Va1},{8:156,10:158,12:157,13:169,14:$VV,19:264,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:155,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{14:[1,266],94:265},{15:[1,267]},{11:[1,268]},{30:[1,269]},{11:[1,270]},{8:156,10:158,12:157,13:169,14:$VV,20:[1,271],28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:190,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{20:[1,273],86:272,87:274,88:$V91,89:$Va1},{20:[1,275]},o($Vb1,[2,99]),{81:[1,276]},{10:56,14:$Vp,15:$Vq,23:277,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{8:156,10:158,12:157,13:169,14:$VV,20:[1,278],28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:190,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{17:[1,279]},{22:[1,280],24:[1,281],40:[1,282],65:[1,283],66:[1,284]},{10:56,14:$Vp,15:$Vq,23:285,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($Vz,[2,15]),{11:[1,286]},o($Vz,[2,18]),o($V61,[2,92],{83:[1,287]}),{20:[1,288]},o($V61,[2,96]),o($Vb1,[2,98]),o($V61,[2,97]),{8:156,10:158,12:157,13:169,14:$VV,19:289,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:155,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ,81:[1,290]},o($V61,[2,102]),{18:[1,291]},{10:56,14:$Vp,15:$Vq,23:292,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{10:56,14:$Vp,15:$Vq,23:293,24:[1,294],33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{41:[1,295]},{17:[2,111]},{17:[2,112]},{17:[1,296],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},o($Vz,[2,17]),{18:[1,297],56:298,82:$V_},o($V61,[2,95]),{8:156,10:158,12:157,13:169,14:$VV,20:[2,101],28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:190,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{8:156,10:158,12:157,13:169,14:$VV,19:299,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:155,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{8:156,10:158,12:157,13:169,14:$VV,19:300,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:155,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{17:[2,107],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{25:[1,301],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{10:56,14:$Vp,15:$Vq,23:302,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{15:[1,303]},{11:[1,304]},{8:156,10:158,12:157,13:169,14:$VV,19:305,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:155,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},o($V61,[2,94]),o($Vb1,[2,100],{8:156,12:157,10:158,56:159,57:160,58:161,59:162,60:163,13:169,55:190,14:$VV,28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21}),{8:156,10:158,12:157,13:169,14:$VV,20:[1,306],28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:190,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},{22:[1,307]},{25:[1,308],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{10:56,14:$Vp,15:$Vq,23:309,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},o($V61,[2,103]),{8:156,10:158,12:157,13:169,14:$VV,20:[1,310],28:$V3,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,43:$V4,44:$V5,45:$V6,46:$V7,47:$V8,55:190,56:159,57:160,58:161,59:162,60:163,61:$VW,62:$VX,63:$VY,64:$VZ,82:$V_,84:$V$,90:$V01,91:$V11,92:$V21},o($V61,[2,104]),{10:56,14:$Vp,15:$Vq,23:311,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{25:[1,312]},{17:[1,313],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},o($V61,[2,93]),{17:[2,108],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ},{22:[1,314]},{17:[2,109]},{10:56,14:$Vp,15:$Vq,23:315,33:$Va,34:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,48:54,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,68:$Vx,79:$Vy},{17:[2,110],29:$VA,30:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$VL,75:$VM,76:$VN,77:$VO,78:$VP,80:$VQ}],
defaultActions: {3:[2,2],18:[2,1],283:[2,111],284:[2,112],313:[2,109]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Funcion} = require('../arbol/nodoAST.js');
    const {DeclaracionVariables} = require('../arbol/nodoAST.js');
    const {Retorno} = require('../arbol/nodoAST.js');
    const {Parametros} = require('../arbol/nodoAST.js');
    const {Expresion, Ternario, Casteo} = require('../arbol/nodoAST.js');
    const {Llamada, Largo, Tolower,Toupper,Truncate,Round,TipoDeDato} = require('../arbol/nodoAST.js');
    const {Vector, HacerString} = require('../arbol/nodoAST.js');
    const {Lista} = require('../arbol/nodoAST.js');
    const {Asignacion} = require('../arbol/nodoAST.js');
    const {Imprimir} = require('../arbol/nodoAST.js');
    const {ActualizarLista} = require('../arbol/nodoAST.js');
    const {ExpresionLogica} = require('../arbol/nodoAST.js');
    const {Incremento} = require('../arbol/nodoAST.js');
    const {Decremento} = require('../arbol/nodoAST.js');
    const {ExpresionRelacional} = require('../arbol/nodoAST.js');
    const {InstruccionIf} = require('../arbol/nodoAST.js');
    const {IntruccionSwitch} = require('../arbol/nodoAST.js');
    const {InstruccionCase} = require('../arbol/nodoAST.js');
    const {BucleWhile} = require('../arbol/nodoAST.js');
    const {BucleFor} = require('../arbol/nodoAST.js');
    const {BucleDoWhile} = require('../arbol/nodoAST.js');
    const {Errores} = require('../arbol/errores.js');

    let errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*comentario simple se ignora*/
break;
case 1:/*comentario compuesto se ignora*/
break;
case 2:/*espacio en blanco a ignorar*/
break;
case 3:
break;
case 4:
break;
case 5:return "INT";
break;
case 6:return "DOUBLE";
break;
case 7:return "BOOL";
break;
case 8:return "CHAR";
break;
case 9:return "STRING";
break;
case 10:return "TRUE";
break;
case 11:return "FALSE";
break;
case 12:return "IMPRIMIR";
break;
case 13:return "NUEVO";
break;
case 14:return "ADD";
break;
case 15:return "IF";
break;
case 16:return "ELSE";
break;
case 17:return "SWITCH";
break;
case 18:return "BREAK";
break;
case 19:return "CASE";
break;
case 20:return "DEFAULT";
break;
case 21:return "WHILE";
break;
case 22:return "FOR";
break;
case 23:return "DO";
break;
case 24:return "CONTINUE";
break;
case 25:return "VOID";
break;
case 26:return "RETURN";
break;
case 27:return "TO_UPPER";
break;
case 28:return "TO_LOWER";
break;
case 29:return "LENGTH";
break;
case 30:return "TRUNCATE";
break;
case 31:return "ROUND";
break;
case 32:return "TYPEOF";
break;
case 33:return "TO_STRING";
break;
case 34:return "TO_CHAR_ARRAY";
break;
case 35:return "MAIN";
break;
case 36:return "LISTA";
break;
case 37:return "MAYOR_IGUAL";
break;
case 38:return "MENOR_IGUAL";
break;
case 39:return "DOBLE_IGUAL";
break;
case 40:return "NEGACION_IGUAL";
break;
case 41:return "INCREMENTO";
break;
case 42:return "DECREMENTO";
break;
case 43:return "SUMA";
break;
case 44:return "RESTA";
break;
case 45:return "PUNTO_COMA";
break;
case 46:return "MULTIPLICACION";
break;
case 47:return "DIVISION";
break;
case 48:return "POTENCIA";
break;
case 49:return "MODULO";
break;
case 50:return "NEGACION";
break;
case 51:return "IGUAL";
break;
case 52:return "MENOR";
break;
case 53:return "MAYOR";
break;
case 54:return "TERNARIO";
break;
case 55:return "DOS_PUNTOS";
break;
case 56:return "OR";
break;
case 57:return "AND";
break;
case 58:return "PAR_ABRE";
break;
case 59:return "PAR_CIERRA";
break;
case 60:return "LLAVE_ABRE";
break;
case 61:return "LLAVE_CIERRA";
break;
case 62:return "PUNTO";
break;
case 63:return "COR_ABRE";
break;
case 64:return "COR_CIERRE";
break;
case 65:return "COMA";
break;
case 66: yy_.yytext = yy_.yytext.toLowerCase(); return "ID"; 
break;
case 67:return "DECIMAL";
break;
case 68:return "ENTERO";
break;
case 69:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 51; 
break;
case 70:cadena = ""; this.begin("string");
break;
case 71:cadena += yy_.yytext;
break;
case 72:cadena += "\"";
break;
case 73:cadena += "\n";
break;
case 74:cadena += "\t";
break;
case 75:cadena += "\\";
break;
case 76:cadena += "\'";
break;
case 77:yy_.yytext = cadena; this.popState(); return 52;
break;
case 78:errores.push(new Errores("Lexico", "Caracter no reconocido en el lenguaje:  " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column + "-" + yy_.yylloc.last_column));
break;
case 79:return 5;
break;
case 80:errores.push(new Errores("Lexico", "Caracter no reconocido en el lenguaje:  " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column + "-" + yy_.yylloc.last_column));
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:[\r\t]+)/i,/^(?:\n)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:break\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:toUpper\b)/i,/^(?:toLower\b)/i,/^(?:length\b)/i,/^(?:Truncate\b)/i,/^(?:Round\b)/i,/^(?:Typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:Main\b)/i,/^(?:list\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:;)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\\r\n]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\')/i,/^(?:["])/i,/^(?:[\r\n])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[71,72,73,74,75,76,77,78],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}